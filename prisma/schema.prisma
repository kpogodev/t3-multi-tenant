generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Platform
model Domain {
  id       String  @id @default(cuid())
  name     String
  apexName String
  verified Boolean
  site   Site?
  isCustom Boolean?
}

model Theme {
  id     String @id @default(cuid())
  name   String
  sites  Site[]
}

model Site {
  id       String @id @default(cuid())
  name     String
  theme    Theme  @relation(fields: [themeId], references: [id])
  themeId  String
  domain   Domain @relation(fields: [domainId], references: [id])
  domainId String @unique

  @@index([themeId])
}

//NextAuth
enum UserRole {
  ADMIN
  DEV
  TENANT
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole    @default(TENANT)
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
