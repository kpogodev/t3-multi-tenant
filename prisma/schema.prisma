generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//NextAuth
enum UserRole {
  ADMIN
  DEV
  TENANT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(TENANT)
  site          Site?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Platform
model Site {
  id       String    @id @default(cuid())
  name     String
  theme    Theme     @relation(fields: [themeId], references: [id])
  themeId  String
  domain   Domain    @relation(fields: [domainId], references: [id])
  domainId String    @unique
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?   @unique
  pages    Page[]
  homepage Homepage?

  @@index([themeId])
}

model Domain {
  id       String   @id @default(cuid())
  name     String
  apexName String
  verified Boolean
  site     Site?
  isCustom Boolean?
}

model Theme {
  id         String      @id @default(cuid())
  name       String
  sites      Site[]
  components Component[]
}

//Site
model Page {
  id        String       @id @default(cuid())
  name      String
  slug      String
  site      Site         @relation(fields: [siteId], references: [id])
  siteId    String
  content   PageContent?
  parentId  String?
  parent    Page?        @relation("PageToPage", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Page[]       @relation("PageToPage")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([siteId])
  @@index([parentId])
}

model PageContent {
  id            String   @id @default(cuid())
  page          Page     @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId        String   @unique
  richTextDraft Json?
  richText      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([pageId])
}

model Homepage {
  id        String   @id @default(cuid())
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Component {
  id        String  @id @default(cuid())
  name      String
  theme     Theme   @relation(fields: [themeId], references: [id])
  themeId   String
  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String  @unique

  @@index([themeId])
}

// Features
enum FeatureType {
  SLIDESHOW
  WELCOME
}

model Feature {
  id        String      @id @default(cuid())
  name      String
  type      FeatureType @unique
  component Component[]
  slideshow Slideshow?
  welcome   Welcome?
}

model Slideshow {
  id        String   @id @default(cuid())
  name      String
  slides    Slide[]
  feature   Feature? @relation(fields: [featureId], references: [id])
  featureId String?  @unique
}

model Slide {
  id          String    @id @default(cuid())
  key         String
  url         String
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideshowId String

  @@index([slideshowId])
}

model Welcome {
  id        String   @id @default(cuid())
  header    String
  text      String
  linkText  String
  linkUrl   String
  feature   Feature? @relation(fields: [featureId], references: [id])
  featureId String?  @unique
}

