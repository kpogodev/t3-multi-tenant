generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//NextAuth
enum UserRole {
  ADMIN
  DEV
  TENANT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(TENANT)
  site          Site?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Platform
model Site {
  id         String      @id @default(cuid())
  name       String
  theme      Theme       @relation(fields: [themeId], references: [id])
  themeId    String
  domain     Domain      @relation(fields: [domainId], references: [id])
  domainId   String      @unique
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?     @unique
  components Component[]
  news       News[]
  pages      Page[]

  @@index([themeId])
}

model Domain {
  id       String   @id @default(cuid())
  name     String
  apexName String
  verified Boolean
  site     Site?
  isCustom Boolean?
}

//Site
model Page {
  id         String       @id @default(cuid())
  name       String
  slug       String
  order      Int          @default(0)
  hidden     Boolean      @default(false)
  special    Boolean      @default(false)
  site       Site         @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId     String
  content    PageContent?
  parentId   String?
  parent     Page?        @relation("PageToPage", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children   Page[]       @relation("PageToPage")
  withNews   Boolean      @default(false)
  withEvents Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([name, siteId], name: "PageNameToSite")
  @@index([siteId])
  @@index([parentId])
}

model PageContent {
  id            String   @id @default(cuid())
  page          Page     @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId        String   @unique
  richTextDraft Json?
  richText      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([pageId])
}

model Theme {
  id       String    @id @default(cuid())
  name     String    @unique
  sites    Site[]
  features Feature[]
}

// Features
enum FeatureType {
  MAP
  SLIDESHOW
  TEXT_BLOCK
  COMPOUND_BLOCK
  VIDEO
}

model Feature {
  id         String      @id @default(cuid())
  name       String
  type       FeatureType
  theme      Theme       @relation(fields: [themeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  themeId    String
  components Component[]

  @@index([themeId])
}

model News {
  id        String         @id @default(cuid())
  title     String
  content   String         @db.LongText
  date      DateTime
  author    String?
  image     ExternalImage?
  site      Site           @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([siteId])
}

//Components
model Component {
  id                 String              @id @default(cuid())
  name               String
  site               Site                @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId             String
  feature            Feature             @relation(fields: [featureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  featureId          String
  componentsRelation ComponentsRelation?

  @@index([siteId])
  @@index([featureId])
}

model ComponentsRelation {
  id              String         @id @default(cuid())
  component       Component      @relation(fields: [componentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  componentId     String         @unique
  compoundBlock   CompoundBlock? @relation(fields: [compoundBlockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  compoundBlockId String?        @unique
  slideshow       Slideshow?     @relation(fields: [slideshowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideshowId     String?        @unique
  textBlock       TextBlock?     @relation(fields: [textBlockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textBlockId     String?        @unique
  video           Video?         @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId         String?        @unique

  @@unique([componentId, compoundBlockId], name: "ComponentCompoundBlock")
  @@unique([componentId, slideshowId], name: "ComponentSlideshow")
  @@unique([componentId, textBlockId], name: "ComponentTextBlock")
  @@unique([componentId, videoId], name: "ComponentVideo")
}

model Slideshow {
  id        String              @id @default(cuid())
  interval  Int?                @default(5000)
  slides    Slide[]
  size      Int                 @default(0)
  component ComponentsRelation?
}

model Slide {
  id          String         @id @default(cuid())
  image       ExternalImage?
  order       Int
  slideshow   Slideshow      @relation(fields: [slideshowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideshowId String

  @@index([slideshowId])
}

model ExternalImage {
  id              String         @id @default(cuid())
  asset_id        String?
  public_id       String
  width           Int
  height          Int
  format          String?
  resource_type   String?
  created_at      DateTime?
  bytes           Int
  type            String?
  placeholder     Boolean?
  url             String?
  secure_url      String
  folder          String?
  access_mode     String?
  slide           Slide?         @relation(fields: [slideId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideId         String?        @unique
  compoundBlock   CompoundBlock? @relation(fields: [compoundBlockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  compoundBlockId String?        @unique
  news            News?          @relation(fields: [newsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  newsId          String?        @unique
}

model CompoundBlock {
  id        String              @id @default(cuid())
  header    String?
  text      String?             @db.LongText
  linkText  String?
  linkUrl   String?
  image     ExternalImage?
  component ComponentsRelation?
}

model TextBlock {
  id        String              @id @default(cuid())
  text      String?             @db.LongText
  component ComponentsRelation?
}

model Video {
  id            String              @id @default(cuid())
  public_id     String?
  width         Int?
  height        Int?
  format        String?
  resource_type String?
  secure_url    String?
  created_at    DateTime            @default(now())
  component     ComponentsRelation?
}
